from datamodel import OrderDepth, TradingState, Order
from typing import Dict, List
import numpy as np

class Trader:
    def __init__(self):
        # Position limits per product
        self.POSITION_LIMITS = {"PICNIC_BASKET_1": 45, "PICNIC_BASKET_2": 50, "CROISSANTS": 50, "JAMS": 50, "DJEMBES": 50}
        # Historical price tracking
        self.historical_prices = {"PICNIC_BASKET_1": [], "PICNIC_BASKET_2": [], "CROISSANTS": [], "JAMS": [], "DJEMBES": []}
        # Strategy parameters
        self.params = {
            "PICNIC_BASKET_1": {
                "acceptable_price": 2000  # Simplified threshold strategy
            },
            "PICNIC_BASKET_2": {"acceptable_price": 10000},  # Existing threshold
            "CROISSANTS": {"acceptable_price": 500},  # Placeholder threshold
            "JAMS": {"acceptable_price": 1000},  # Placeholder threshold
            "DJEMBES": {"acceptable_price": 1500}  # Placeholder threshold for Djembes
        }

    def calculate_mid_price(self, order_depth: OrderDepth) -> float:
        """Calculate mid-price from best bid and ask."""
        if order_depth.buy_orders and order_depth.sell_orders:
            best_bid = max(order_depth.buy_orders.keys())
            best_ask = min(order_depth.sell_orders.keys())
            return (best_bid + best_ask) / 2
        return 0
        
    def run(self, state: TradingState) -> tuple[Dict[str, List[Order]], int, str]:
        result = {}
        for product in state.order_depths:
            order_depth: OrderDepth = state.order_depths[product]
            orders: List[Order] = []
            position = state.position.get(product, 0)
            position_limit = self.POSITION_LIMITS.get(product, 20)

            # Track mid-price
            mid_price = self.calculate_mid_price(order_depth)
            if mid_price > 0:
                self.historical_prices[product].append(mid_price)
                if len(self.historical_prices[product]) > 100:
                    self.historical_prices[product].pop(0)

            # Product-specific trading logic
            if product == "PICNIC_BASKET_1":
                acceptable_price = self.params[product]["acceptable_price"]
                if order_depth.sell_orders:
                    best_ask = min(order_depth.sell_orders.keys())
                    if best_ask < acceptable_price:
                        buy_quantity = min(-order_depth.sell_orders[best_ask], position_limit - position)
                        if buy_quantity > 0:
                            orders.append(Order(product, best_ask, buy_quantity))
                if order_depth.buy_orders:
                    best_bid = max(order_depth.buy_orders.keys())
                    if best_bid > acceptable_price + 1:
                        sell_quantity = min(order_depth.buy_orders[best_bid], position_limit + position)
                        if sell_quantity > 0:
                            orders.append(Order(product, best_bid, -sell_quantity))

            elif product == "PICNIC_BASKET_2":
                acceptable_price = self.params[product]["acceptable_price"]
                if order_depth.sell_orders:
                    best_ask = min(order_depth.sell_orders.keys())
                    if best_ask < acceptable_price:
                        buy_quantity = min(-order_depth.sell_orders[best_ask], position_limit - position)
                        if buy_quantity > 0:
                            orders.append(Order(product, best_ask, buy_quantity))
                if order_depth.buy_orders:
                    best_bid = max(order_depth.buy_orders.keys())
                    if best_bid > acceptable_price + 1:
                        sell_quantity = min(order_depth.buy_orders[best_bid], position_limit + position)
                        if sell_quantity > 0:
                            orders.append(Order(product, best_bid, -sell_quantity))

            elif product == "CROISSANTS":
                acceptable_price = self.params[product]["acceptable_price"]
                if order_depth.sell_orders:
                    best_ask = min(order_depth.sell_orders.keys())
                    if best_ask < acceptable_price:
                        buy_quantity = min(-order_depth.sell_orders[best_ask], position_limit - position)
                        if buy_quantity > 0:
                            orders.append(Order(product, best_ask, buy_quantity))
                if order_depth.buy_orders:
                    best_bid = max(order_depth.buy_orders.keys())
                    if best_bid > acceptable_price + 1:
                        sell_quantity = min(order_depth.buy_orders[best_bid], position_limit + position)
                        if sell_quantity > 0:
                            orders.append(Order(product, best_bid, -sell_quantity))

            elif product == "JAMS":
                acceptable_price = self.params[product]["acceptable_price"]
                if order_depth.sell_orders:
                    best_ask = min(order_depth.sell_orders.keys())
                    if best_ask < acceptable_price:
                        buy_quantity = min(-order_depth.sell_orders[best_ask], position_limit - position)
                        if buy_quantity > 0:
                            orders.append(Order(product, best_ask, buy_quantity))
                if order_depth.buy_orders:
                    best_bid = max(order_depth.buy_orders.keys())
                    if best_bid > acceptable_price + 1:
                        sell_quantity = min(order_depth.buy_orders[best_bid], position_limit + position)
                        if sell_quantity > 0:
                            orders.append(Order(product, best_bid, -sell_quantity))

            elif product == "DJEMBES":
                acceptable_price = self.params[product]["acceptable_price"]
                if order_depth.sell_orders:
                    best_ask = min(order_depth.sell_orders.keys())
                    if best_ask < acceptable_price:
                        buy_quantity = min(-order_depth.sell_orders[best_ask], position_limit - position)
                        if buy_quantity > 0:
                            orders.append(Order(product, best_ask, buy_quantity))
                if order_depth.buy_orders:
                    best_bid = max(order_depth.buy_orders.keys())
                    if best_bid > acceptable_price + 1:
                        sell_quantity = min(order_depth.buy_orders[best_bid], position_limit + position)
                        if sell_quantity > 0:
                            orders.append(Order(product, best_bid, -sell_quantity))

            result[product] = orders

        conversions = 0
        traderData = ""
        return result, conversions, traderData
